// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Studentski_hotel.Data;

namespace DBdata.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210123001751_Admin-dodavanje")]
    partial class Admindodavanje
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBdata.EntityModels.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatumRodjenja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID")
                        .IsUnique()
                        .HasFilter("[KorisnikID] IS NOT NULL");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("DBdata.EntityModels.CiklusStudija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CiklusStudijas");
                });

            modelBuilder.Entity("DBdata.EntityModels.DnevnaPonuda", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KarticaID")
                        .HasColumnType("int");

                    b.Property<int>("KuharicaID")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KarticaID");

                    b.HasIndex("KuharicaID");

                    b.ToTable("DnevnaPonudas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Drzava", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Drzavas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Fakultet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Fakultets");
                });

            modelBuilder.Entity("DBdata.EntityModels.GodinaStudija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("GodinaStudijas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Grad", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KantonID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KantonID");

                    b.ToTable("Grads");
                });

            modelBuilder.Entity("DBdata.EntityModels.Kanton", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kantons");
                });

            modelBuilder.Entity("DBdata.EntityModels.Kartica", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojKartice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("StanjeNaKartici")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Karticas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Konkurs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrojIndeksa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CiklusStudijaID")
                        .HasColumnType("int");

                    b.Property<string>("DatumRodjenja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FakultetID")
                        .HasColumnType("int");

                    b.Property<int>("GodinaStudijaID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImeOca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KantonID")
                        .HasColumnType("int");

                    b.Property<string>("LicnaKarta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MjestoRodjenjaID")
                        .HasColumnType("int");

                    b.Property<int>("MjestoStanovanjaID")
                        .HasColumnType("int");

                    b.Property<string>("Mjesto_izdavanja_LK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobitel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolID")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RezultatKonkursaID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("TipKandidataID")
                        .HasColumnType("int");

                    b.Property<string>("ZanimanjeRoditelja")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CiklusStudijaID");

                    b.HasIndex("FakultetID");

                    b.HasIndex("GodinaStudijaID");

                    b.HasIndex("KantonID");

                    b.HasIndex("MjestoRodjenjaID");

                    b.HasIndex("MjestoStanovanjaID");

                    b.HasIndex("PolID");

                    b.HasIndex("RezultatKonkursaID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TipKandidataID");

                    b.ToTable("Konkurs");
                });

            modelBuilder.Entity("DBdata.EntityModels.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DBdata.EntityModels.Lokacija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KantonID")
                        .HasColumnType("int");

                    b.Property<int>("MjestoStanovanjaID")
                        .HasColumnType("int");

                    b.Property<string>("PostanskiBroj")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KantonID");

                    b.HasIndex("MjestoStanovanjaID");

                    b.ToTable("Lokacijas");
                });

            modelBuilder.Entity("DBdata.EntityModels.NacinUplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("NacinUplates");
                });

            modelBuilder.Entity("DBdata.EntityModels.NajavaOdlaska", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatumPolaska")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatumPovratka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UgovorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UgovorID");

                    b.ToTable("NajavaOdlaskas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Obavijest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatumVrijeme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naslov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecepcioerID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RecepcioerID");

                    b.ToTable("Obavijests");
                });

            modelBuilder.Entity("DBdata.EntityModels.Obrok", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detalji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Iznos")
                        .HasColumnType("real");

                    b.Property<int>("KuharicaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KuharicaID");

                    b.ToTable("Obroks");
                });

            modelBuilder.Entity("DBdata.EntityModels.Osoblje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatumRodjenja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatumZaposlenja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GodinaZaposlenja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LokacijaID")
                        .HasColumnType("int");

                    b.Property<int>("PolID")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LokacijaID");

                    b.HasIndex("PolID");

                    b.ToTable("Osobljes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Osoblje");
                });

            modelBuilder.Entity("DBdata.EntityModels.Pol", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pols");
                });

            modelBuilder.Entity("DBdata.EntityModels.RezultatKonkursa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojBodova")
                        .HasColumnType("int");

                    b.Property<int?>("VrstaRazlogaOdbijanjaID")
                        .HasColumnType("int");

                    b.Property<int?>("VrstaStanjaKonkursaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("VrstaRazlogaOdbijanjaID");

                    b.HasIndex("VrstaStanjaKonkursaID");

                    b.ToTable("RezultatKonkursas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Soba", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojKreveta")
                        .HasColumnType("int");

                    b.Property<string>("BrojSobe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ImaBalkon")
                        .HasColumnType("bit");

                    b.Property<string>("Napomena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sprat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sobas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojIndeksa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CiklusStudijaID")
                        .HasColumnType("int");

                    b.Property<string>("DatumRodjenja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FakultetID")
                        .HasColumnType("int");

                    b.Property<int>("GodinaStudijaID")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImeOca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JMBG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LicnaKarta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LokacijaID")
                        .HasColumnType("int");

                    b.Property<int>("MjestoRodjenjaID")
                        .HasColumnType("int");

                    b.Property<string>("Mobitel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolID")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipKandidataID")
                        .HasColumnType("int");

                    b.Property<bool>("Uselio")
                        .HasColumnType("bit");

                    b.Property<string>("ZanimanjeRoditelja")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CiklusStudijaID");

                    b.HasIndex("FakultetID");

                    b.HasIndex("GodinaStudijaID");

                    b.HasIndex("KorisnikID")
                        .IsUnique()
                        .HasFilter("[KorisnikID] IS NOT NULL");

                    b.HasIndex("LokacijaID");

                    b.HasIndex("MjestoRodjenjaID");

                    b.HasIndex("PolID");

                    b.HasIndex("TipKandidataID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DBdata.EntityModels.TipKandidata", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("tipKandidatas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Ugovor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DodanUgovorOsobljeID")
                        .HasColumnType("int");

                    b.Property<int>("KarticaID")
                        .HasColumnType("int");

                    b.Property<int>("SobaID")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DodanUgovorOsobljeID");

                    b.HasIndex("KarticaID");

                    b.HasIndex("SobaID");

                    b.HasIndex("StudentID");

                    b.ToTable("Ugovors");
                });

            modelBuilder.Entity("DBdata.EntityModels.Uplata", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NacinUplateID")
                        .HasColumnType("int");

                    b.Property<int>("RecepcioerID")
                        .HasColumnType("int");

                    b.Property<float>("Stanje")
                        .HasColumnType("real");

                    b.Property<int>("UgovorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NacinUplateID");

                    b.HasIndex("RecepcioerID");

                    b.HasIndex("UgovorID");

                    b.ToTable("Uplatas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Upozorenje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatumSlanja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UgovorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UgovorID");

                    b.ToTable("Upozorenjes");
                });

            modelBuilder.Entity("DBdata.EntityModels.VrstaRazlogaOdbijanja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("vrstaRazlogaOdbijanjas");
                });

            modelBuilder.Entity("DBdata.EntityModels.VrstaStanjaKonkursa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VrstaStanjaKonkursas");
                });

            modelBuilder.Entity("DBdata.EntityModels.VrstaStanjaZahtjeva", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VrstaStanjaZahtjevas");
                });

            modelBuilder.Entity("DBdata.EntityModels.VrstaZahtjeva", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VrstaZahtjevas");
                });

            modelBuilder.Entity("DBdata.EntityModels.Zahtjev", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Datum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UgovorID")
                        .HasColumnType("int");

                    b.Property<int>("VrstaStanjaZahtjevaID")
                        .HasColumnType("int");

                    b.Property<int>("VrstaZahtjevaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UgovorID");

                    b.HasIndex("VrstaStanjaZahtjevaID");

                    b.HasIndex("VrstaZahtjevaID");

                    b.ToTable("Zahtjevs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DBdata.EntityModels.Kuharica", b =>
                {
                    b.HasBaseType("DBdata.EntityModels.Osoblje");

                    b.Property<string>("KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("KorisnikID")
                        .IsUnique()
                        .HasFilter("[KorisnikID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Kuharica");
                });

            modelBuilder.Entity("DBdata.EntityModels.Recepcioer", b =>
                {
                    b.HasBaseType("DBdata.EntityModels.Osoblje");

                    b.Property<string>("KorisnikID")
                        .HasColumnName("Recepcioer_KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("KorisnikID")
                        .IsUnique()
                        .HasFilter("[Recepcioer_KorisnikID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Recepcioer");
                });

            modelBuilder.Entity("DBdata.EntityModels.Referent", b =>
                {
                    b.HasBaseType("DBdata.EntityModels.Osoblje");

                    b.Property<string>("KorisnikID")
                        .HasColumnName("Referent_KorisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("KorisnikID")
                        .IsUnique()
                        .HasFilter("[Referent_KorisnikID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Referent");
                });

            modelBuilder.Entity("DBdata.EntityModels.Admin", b =>
                {
                    b.HasOne("DBdata.EntityModels.Korisnik", "Korisnik")
                        .WithOne("Admin")
                        .HasForeignKey("DBdata.EntityModels.Admin", "KorisnikID");
                });

            modelBuilder.Entity("DBdata.EntityModels.DnevnaPonuda", b =>
                {
                    b.HasOne("DBdata.EntityModels.Kartica", "Kartica")
                        .WithMany()
                        .HasForeignKey("KarticaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Kuharica", "Kuharica")
                        .WithMany()
                        .HasForeignKey("KuharicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Grad", b =>
                {
                    b.HasOne("DBdata.EntityModels.Kanton", "Kanton")
                        .WithMany()
                        .HasForeignKey("KantonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Konkurs", b =>
                {
                    b.HasOne("DBdata.EntityModels.CiklusStudija", "CiklusStudija")
                        .WithMany()
                        .HasForeignKey("CiklusStudijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Fakultet", "Fakultet")
                        .WithMany()
                        .HasForeignKey("FakultetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.GodinaStudija", "GodinaStudija")
                        .WithMany()
                        .HasForeignKey("GodinaStudijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Kanton", "Kanton")
                        .WithMany()
                        .HasForeignKey("KantonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Grad", "MjestoRodjenja")
                        .WithMany()
                        .HasForeignKey("MjestoRodjenjaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Grad", "MjestoStanovanja")
                        .WithMany()
                        .HasForeignKey("MjestoStanovanjaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Pol", "Pol")
                        .WithMany()
                        .HasForeignKey("PolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.RezultatKonkursa", "RezultatKonkursa")
                        .WithMany()
                        .HasForeignKey("RezultatKonkursaID");

                    b.HasOne("DBdata.EntityModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");

                    b.HasOne("DBdata.EntityModels.TipKandidata", "TipKandidata")
                        .WithMany()
                        .HasForeignKey("TipKandidataID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Lokacija", b =>
                {
                    b.HasOne("DBdata.EntityModels.Kanton", "Kanton")
                        .WithMany()
                        .HasForeignKey("KantonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Grad", "MjestoStanovanja")
                        .WithMany()
                        .HasForeignKey("MjestoStanovanjaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.NajavaOdlaska", b =>
                {
                    b.HasOne("DBdata.EntityModels.Ugovor", "Ugovor")
                        .WithMany()
                        .HasForeignKey("UgovorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Obavijest", b =>
                {
                    b.HasOne("DBdata.EntityModels.Recepcioer", "Recepcioer")
                        .WithMany()
                        .HasForeignKey("RecepcioerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Obrok", b =>
                {
                    b.HasOne("DBdata.EntityModels.Kuharica", "Kuharica")
                        .WithMany()
                        .HasForeignKey("KuharicaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Osoblje", b =>
                {
                    b.HasOne("DBdata.EntityModels.Lokacija", "Lokacija")
                        .WithMany()
                        .HasForeignKey("LokacijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Pol", "Pol")
                        .WithMany()
                        .HasForeignKey("PolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.RezultatKonkursa", b =>
                {
                    b.HasOne("DBdata.EntityModels.VrstaRazlogaOdbijanja", "VrstaRazlogaOdbijanja")
                        .WithMany()
                        .HasForeignKey("VrstaRazlogaOdbijanjaID");

                    b.HasOne("DBdata.EntityModels.VrstaStanjaKonkursa", "VrstaStanjaKonkursa")
                        .WithMany()
                        .HasForeignKey("VrstaStanjaKonkursaID");
                });

            modelBuilder.Entity("DBdata.EntityModels.Student", b =>
                {
                    b.HasOne("DBdata.EntityModels.CiklusStudija", "CiklusStudija")
                        .WithMany()
                        .HasForeignKey("CiklusStudijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Fakultet", "Fakultet")
                        .WithMany()
                        .HasForeignKey("FakultetID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.GodinaStudija", "GodinaStudija")
                        .WithMany()
                        .HasForeignKey("GodinaStudijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Korisnik", "Korisnik")
                        .WithOne("Student")
                        .HasForeignKey("DBdata.EntityModels.Student", "KorisnikID");

                    b.HasOne("DBdata.EntityModels.Lokacija", "Lokacija")
                        .WithMany()
                        .HasForeignKey("LokacijaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Grad", "MjestoRodjenja")
                        .WithMany()
                        .HasForeignKey("MjestoRodjenjaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Pol", "Pol")
                        .WithMany()
                        .HasForeignKey("PolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.TipKandidata", "TipKandidata")
                        .WithMany()
                        .HasForeignKey("TipKandidataID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Ugovor", b =>
                {
                    b.HasOne("DBdata.EntityModels.Osoblje", "DodanUgovorOsoblje")
                        .WithMany()
                        .HasForeignKey("DodanUgovorOsobljeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Kartica", "Kartica")
                        .WithMany()
                        .HasForeignKey("KarticaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Soba", "Soba")
                        .WithMany()
                        .HasForeignKey("SobaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Uplata", b =>
                {
                    b.HasOne("DBdata.EntityModels.NacinUplate", "NacinUplate")
                        .WithMany()
                        .HasForeignKey("NacinUplateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Recepcioer", "Recepcioer")
                        .WithMany()
                        .HasForeignKey("RecepcioerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Ugovor", "Ugovor")
                        .WithMany()
                        .HasForeignKey("UgovorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Upozorenje", b =>
                {
                    b.HasOne("DBdata.EntityModels.Ugovor", "Ugovor")
                        .WithMany()
                        .HasForeignKey("UgovorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Zahtjev", b =>
                {
                    b.HasOne("DBdata.EntityModels.Ugovor", "Ugovor")
                        .WithMany()
                        .HasForeignKey("UgovorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.VrstaStanjaZahtjeva", "VrstaStanjaZahtjeva")
                        .WithMany()
                        .HasForeignKey("VrstaStanjaZahtjevaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.VrstaZahtjeva", "VrstaZahtjeva")
                        .WithMany()
                        .HasForeignKey("VrstaZahtjevaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DBdata.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DBdata.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBdata.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DBdata.EntityModels.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DBdata.EntityModels.Kuharica", b =>
                {
                    b.HasOne("DBdata.EntityModels.Korisnik", "Korisnik")
                        .WithOne("Kuharica")
                        .HasForeignKey("DBdata.EntityModels.Kuharica", "KorisnikID");
                });

            modelBuilder.Entity("DBdata.EntityModels.Recepcioer", b =>
                {
                    b.HasOne("DBdata.EntityModels.Korisnik", "Korisnik")
                        .WithOne("Recepcioer")
                        .HasForeignKey("DBdata.EntityModels.Recepcioer", "KorisnikID");
                });

            modelBuilder.Entity("DBdata.EntityModels.Referent", b =>
                {
                    b.HasOne("DBdata.EntityModels.Korisnik", "Korisnik")
                        .WithOne("Referent")
                        .HasForeignKey("DBdata.EntityModels.Referent", "KorisnikID");
                });
#pragma warning restore 612, 618
        }
    }
}
